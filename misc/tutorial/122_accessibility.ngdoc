@ngdoc overview
@name Tutorial: 122 Accessibility
@description

Accessibility is often the overlooked element in web development.
However, like making sure your content is visible on all major browsers.
Your content must also be available to all of your users, regardless of whether they can see the screen the same way you can.

Prerequisites:
<ul>
 <li>Include angular-aria (Angular 1.3.0+).
  <pre>
      <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.js"></script>
      <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular-aria.js"></script>
      <link rel="styleSheet" href="release/ui-grid-unstable.css"/>
      <script src="/release/ui-grid-unstable.js"></script>
  </pre>
 </li>
 <li>Include ngAria module as a dependency in your app.
   <pre>
       var app = angular.module('app', ['ngAria', 'ui.grid']);
   </pre>
 </li>
</ul>

<table>
  <caption>Browser Support Status</caption>
  <thead>
    <tr>
      <th colspan="3">Specs</th><th colspan="2">Support</th>
    </tr>
    <tr>
      <th>Browser</th><th>OS</th><th>Utility</th><th>Core</th><th>Pagination</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Chrome</td><td>OSX</td><td>Voice Over</td><td>Full</td><td>Full</td>
    </tr>
    <tr>
      <td>Firefox</td><td>OSX</td><td>Voice Over</td><td>Full (Interperts as list instead of grid)</td><td>Full</td>
    </tr>
    <tr>
      <td>Safari</td><td>OSX</td><td>Voice Over</td><td>Header and menus only.</td><td>Full</td>
    </tr>
  </tbody>
</table>
Why only OSX? Because its the only tool that the grid has been tested with. If you test it with something else and it works then feel free to
update this document.

<h2>Test with OSX Voice Over</h2>
To enable OSX voice over you can use <kbd>âŒ˜</kbd>+<kbd>F5</kbd>. Modifying your Voice Over settings to automatically follow the mouse will
make it easier to move the Voice Over cursor to the location you want to start navigating from. Alternatively you can use the Voice Over navigation
to reach the table. Focus is managed within the grid to keep the voice over cursor from getting lost as menus are added and removed and while
buttons are disabled.

<h2>Test without OSX Voice Over</h2>
Simply use the <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys to navigate the menus and buttons on the grid.

@example
<example module="app" deps="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular-aria.js">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ngAria', 'ui.grid', 'ui.grid.pagination']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      var setGender = function ( row, index ){
        row.gender = row.gender==='male' ? '1' : '2';
      };
      $scope.smallGrid = {
        enableSorting: true,
        showGridFooter: true,
        enableGridMenu: true,
        enableFiltering: true,
        columnDefs: [
          { field: 'firstName'},
          {
            field: 'lastName',
            filter: {
              placeholder: 'set sr focus here',
              ariaLabel: 'I have a custom aria label for this field.'
            }
          },
          {
            field: 'gender',
            filter: {
              type: uiGridConstants.filter.SELECT,
              selectOptions: [
                {value: '1', label: 'male'},
                {value: '2', label: 'female'},
              ],
            },
            cellFilter: 'mapGender'
          },
          { field: 'company' },
          { field: 'employed'},
        ],
        data: [
          {
              "firstName": "Cox",
              "lastName": "Carney",
              "gender": 1,
              "company": "Enormo",
              "employed": true
          },
          {
              "firstName": "Lorraine",
              "lastName": "Wise",
              "gender": 2,
              "company": "Comveyer",
              "employed": false
          },
          {
              "firstName": "Nancy",
              "lastName": "Waters",
              "gender": 2,
              "company": "Fuelton",
              "employed": false
          }
        ],
      };


      $scope.virtualGridOptions = {
        enableSorting: true,
        showGridFooter: true,
        enableFiltering: true,
        columnDefs: [
          { field: 'name'},
          { field: 'company'},
          { field: 'gender', cellTooltip: true, headerTooltip: true, cellFilter: 'mapGender' },
        ],
        onRegisterApi: function( gridApi ) {
          $scope.gridApi = gridApi;
          $scope.gridApi.core.on.sortChanged( $scope, function( grid, sort ) {
            $scope.gridApi.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
          })
        }
      };
      $scope.paginationGridOptions = {
        paginationPageSizes: [10, 25, 50, 75],
        paginationPageSize: 10,
      };
      angular.extend($scope.paginationGridOptions, $scope.virtualGridOptions);

      $http.get('/data/100.json')
        .success(function(data) {
          data.forEach(setGender);
          $scope.virtualGridOptions.data = data;
          $scope.paginationGridOptions.data = data;
        });
    }])
    .filter('mapGender', function() {
      var genderHash = {
        1: 'male',
        2: 'female'
      };

      return function(input) {
        if (!input){
          return '';
        } else {
          return genderHash[input];
        }
      };
    });
  </file>
  <file name="index.html">
    <div role="application" ng-controller="MainCtrl">
      <h1>Short Dataset without Virtualization</h1>
      <button type="button" name="Set focus button" class="btn btn-default">Set Focus Here</button></br></br>
      <div id="grid1" ui-grid="smallGrid" class="grid1"></div>
      </br>
      <h1>Long Dataset with Virtualization</h1>
      <button type="button" name="Set focus button" class="btn btn-default">Set Focus Here</button></br></br>
      <div id="grid2" ui-grid="virtualGridOptions" class="grid2" aria-labelledby="grid2-label"></div>
      <label id="grid2-label">A large list of people and the companies they work for.</label>
      <p>
        The above example only allows the screen reader to read the data that is currently visible.
        Since the browser has no knowledge about the location of the screen reader cursor the grid
        never scrolls.
        The plan for the future is to integrate cell nav with the aria labels so that the screen
        reader dictates where the user is on the grid.
      </p>
      </br>
      <h1>Long Dataset with Virtualization and Pagination</h1>
      <button type="button" name="Set focus button" class="btn btn-default">Set Focus Here</button></br></br>
      <div id="grid3" ui-grid="paginationGridOptions" class="grid3" ui-grid-pagination aria-labelledby="grid3-label"></div>
      <label id="grid3-label">A large list of people and the companies they work for using pagination controls.</label>
    </div>
  </file>
  <file name="main.css">
    .grid1 {
      width: 700px;
      height: 300px;
    }
    .grid2 {
      width: 700px;
      height: 400px;
    }
    .grid3 {
      width: 700px;
      height: 430px;
    }
    .red { color: red;  background-color: yellow !important; }
    .blue { color: blue;  }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    var GridObjectTest = require('../../test/e2e/gridObjectTestUtils.spec.js');
    var grid1 = new GridObjectTest('grid1');
    var grid2 = new GridObjectTest('grid2');
    var grid3 = new GridObjectTest('grid3');
    describe('accessibility tests', function(){
      // Reload the page before each test if on Firefox. Chrome does it automatically.
      gridTestUtils.firefoxReload();

      var expectToBeFocused = function(element){
        return expect(element.getInnerHtml()).
          toBe(browser.driver.switchTo().activeElement().getInnerHtml());
      };

      describe('first grid on page, no virtual data.', function(){
        describe('when column menu clicked', function(){
          it('should set focus to the first element in the menu', function(){
            grid1.clickColumnMenu(0).then(function(){
              var columnMenu = grid1.getGrid().element(by.css( '.ui-grid-column-menu' ));
              var menuItems = columnMenu.all( by.css( '.ui-grid-menu-item' ) );
              return expectToBeFocused(menuItems.first());
            });
          });
        });
        describe('when column menu is closed by sort', function(){
          it('should return the focus back to the menu button', function(){
            grid1.clickColumnMenuSortAsc(0).then(function(){
              var menuButton = grid1.headerCell(0).element( by.css( '.ui-grid-column-menu-button' ));
              return expectToBeFocused(menuButton);
            })
          });
        });
        describe('when column menu is closed by hiding the column', function(){
          it('should move the focus to the grid menu', function(){
            grid1.clickColumnMenuHide(0).then(function(){
              var gridMenuButton = grid1.getGrid().element( by.css( '.ui-grid-icon-container' ));
              return expectToBeFocused(gridMenuButton);
            });
          });
        });
        describe('when a filter is removed with the remove filter button', function(){
          it('should move the focus onto the filter input field', function(){
            var colNum = 0;
            return grid1.enterFilterInColumn(colNum, 'Cox').then(function(){
              return grid1.cancelFilterInColumn(colNum).then(function(){
                var filterInput = grid1.headerCell(colNum).element( by.css( '.ui-grid-filter-input' ) );
                expectToBeFocused(filterInput);
              });
            });
          });
        });
      });
    });

  </file>
</example>
